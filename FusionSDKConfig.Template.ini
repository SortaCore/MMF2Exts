; To use this file in your projects, rename to "FusionSDKConfig.ini"

; SDK Properties used by all MMF2Exts SDKs, but particularly by DarkEdif. See SDK\Lib\FusionSDK.props.
[Global]

; If set to true, uses Windows XP compatibility - if XP tools are available.
; Refer to file MMF2Exts\DarkEdif\#MFAs and documentation\DarkEdif MultiTargeting.md to set up VS
; with or without XP compatibility correctly.
WindowsXPCompatibility = true

; If set to speed, makes large + fast. Size = small + slow.
; size_redist = very small, just as slow, has a VS redistributable dependency.
FavorSizeOrSpeed = speed

; If true, creates PDBs for Edittime and Runtime builds.
; Debug builds will always have them.
MakePDBDuringReleaseBuild = false

; If true, when compiling Debug and Debug Unicode on Windows, will disable incremental linking,
; e.g. live editing during debug, and will build with all CPU cores (one core per cpp file).
UseMultiProcessorCompilationInDebug = true

; Comma-separated list of extension names, enables update checker tagging.
; A unique key is written into Data\Runtime MFXs, making the file unique to antiviruses.
DarkEdifUpdateCheckerTagging = ExampleExtName

; If true, switches toolset to non-XP if applicable, and enables all other analysis settings,
; so Code Analysis will run during VS's Windows project build.
; You can also set it to "debugonly", in which case those changes will only apply
; during Debug and Debug Unicode builds.
; You may need VS Community or Professional to use Code Analysis.
RunStaticCodeAnalysis = false

; Rename output MFX files - anticipates internal classes are similarly renamed, like CRunNewName.java containing CRunNewName class
; Format is MFXNameOverride,Original Project Name=MFX Output Name, e.g.:
; MFXNameOverride,DarkEdif Template=Dark Temp
; will, on Windows, have a project of DarkEdif Template.Windows.vcxproj, and produce Dark Temp.mfx
; and on Android, have a project of DarkEdif Template.Android.vcxproj, and produce Dark_Temp.zip, with CRunDark_Temp Java classes
 
; If true, dumps the FusionSDK.props's #defines (the /D commandlines)
; into Output window. Only necessary if you're debugging FusionSDK.props.
EchoAllDefinesFromPropsFileDuringBuild = false

; Set PSCP/PLink Windows path and arguments used to copy back built iOS extension files
; from remote iOS server back to your Windows machine.
; PSCP args include source {0} and local destination path {1}. You must not quote around {0} or {1}.
; Make sure you include -batch commandline, or PSCP/PLink will wait for you to press Enter on an invisible window.
; To test, run plink in cmd without passing -batch, and ensure no keyboard interaction is requested (e.g. no password input, host key is trusted already)
PSCPPath = C:\Program Files\PuTTY\pscp.exe
PSCPArgs = -batch -P 22 -i "Private ppk file for SSH login.ppk" MacUser@LocalServerIP:{0} {1}
PLinkPath = C:\Program Files\PuTTY\plink.exe
PLinkArgs = -batch -P 22 -i "Private ppk file for SSH login.ppk" MacUser@LocalServerIP

; When VS builds iOS/Mac, it'll make a Temp folder to put all its output files. The Windows folder structure is
; replicated on the Mac side. Update this to the Temp folder path that is created in the Mac's MMF2Exts folder.
iOSOrMacRemoteOutputFolder = /Users/Shared/MacUser/vcremote/.../MMF2Exts/Temp/

; iOS builds to pack into the frameworks created by iOS builds; comma separated.
; Full list of possible archs: i386, armv7, arm64, x86_64, armv7s, arm64e
; If you have XCode 13.4.1 or earlier can build 32-bit targets (i386, armv7, armv7s)
; Note that arm64e is new and considered unstable, and i386 is ancient.
; Recommended: arm64, x86_64
; See DarkEdif/#MFAs and documentation/DarkEdif MultiTargeting.md
iOSBuildArchitecturesDebug = arm64, x86_64
iOSBuildArchitecturesRuntime = arm64, x86_64

; You can specify your Mac login password and anything else. Use single-quotes in place of double quotes.
; Example:
; MacCodeSignEmail = yourappleid@example.com
; MacKeychainParams = -p 'secret password sent in plaintext'

; Example for ext specific settings
; note that some settings are read by props files, and will ignore group names - so effectively they're Global only
[Example Ext Name]
; Minimum OS versions - this version and higher are usable
iOSDeployVersion = 10.0
MacDeployVersion = 10.13

; For Android, change API target in project properties
; For Windows, change Windows SDK version

[Bluewing Client]
iOSDeployVersion=10.0
MacDeployVersion=10.13
; link extra libraries, exclude the lib prefix, so to link zlib (libz), we just put z
MacExtraLibraries=z

[Bluewing Server]
iOSDeployVersion=10.0
MacDeployVersion=10.13
; link libz, crypto and ssl (for WebSocket clients using HTTPS/WSS)
MacExtraLibraries=z;crypto;ssl